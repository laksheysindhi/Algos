Source  https://www.geeksforgeeks.org/jvm-works-jvm-architecture/


JVM(Java Virtual Machine) acts as a run-time engine to run Java applications.
JVM is the one that actually calls the main method present in a java code

JVM PART OF JRE


When we compile a .java file, .class files(contains byte-code) with the same class names present in .java file are generated by the Java compiler.
This .class file goes into various steps when we run it.

First of all Class Loader comes to Picture

CLASS LOADER SUBSYSTEM

 1 Loading
 2 Linking
 3 Initialization

 Loading : The Class loader reads the .class file, generate the corresponding binary data and save it in method area.
  For each .class file, JVM stores following information in method area.

 Fully qualified name of the loaded class and its immediate parent class.
 Whether .class file is related to Class or Interface or Enum
 Modifier, Variables and Method information etc.


 After loading .class file, JVM creates an object of type Class to represent this file in the heap memory.
  Please note that this object is of type Class predefined in java.lang package.
  This Class object can be used by the programmer for getting class level information like name of class, parent name, methods and variable information etc.
  To get this object reference we can use getClass() method of Object class.



  JVM Memory
  Method area :In method area, all class level information like class name, immediate parent class name, methods and variables information etc. are stored, including static variables. There is only one method area per JVM, and it is a shared resource.

  Heap area :Information of all objects is stored in heap area. There is also one Heap Area per JVM. It is also a shared resource.

  Stack area :For every thread, JVM create one run-time stack which is stored here. Every block of this stack is called activation record/stack frame which store methods calls. All local variables of that method are stored in their corresponding frame. After a thread terminate, itâ€™s run-time stack will be destroyed by JVM. It is not a shared resource.

  PC Registers :Store address of current execution instruction of a thread. Obviously each thread has separate PC Registers.

  Native method stacks :For every thread, separate native stack is created. It stores native method information.




  Execution Engine
  Execution engine execute the .class (bytecode). It reads the byte-code line by line, use data and information present in various memory area and execute instructions. It can be classified in three parts :-

  Interpreter : It interprets the bytecode line by line and then executes. The disadvantage here is that when one method is called multiple times, every time interpretation is required.
  Just-In-Time Compiler(JIT) : It is used to increase efficiency of interpreter.It compiles the entire bytecode and changes it to native code so whenever interpreter see repeated method calls,JIT provide direct native code for that part so re-interpretation is not required,thus efficiency is improved.
  Garbage Collector : It destroy un-referenced objects.For more on Garbage Collector,refer Garbage Collector